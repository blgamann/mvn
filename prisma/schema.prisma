// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  password         String?
  why              String?
  mediums          String[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  cycles           Cycle[]   // Cycles owned by the user
  likes            Like[]    // Likes made by the user
  comments         Comment[] // Comments made by the user

  recycledCycles   Cycle[]   @relation("user_recycled_cycles") // Cycles recycled by the user
  upcycledCycles   Cycle[]   @relation("user_upcycled_cycles") // Cycles upcycled by the user
}

model Cycle {
  id                  Int       @id @default(autoincrement())
  reflection          String
  medium              String?

  imageUrl            String?
  // TODO: timezone
  createdAt           DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime  @updatedAt @db.Timestamptz(6)

  // TODO: refactor event to use DateTime
  eventDescription    String?
  eventDate           DateTime?
  eventStartTime      String?
  eventEndTime        String?
  eventLocation       String?

  // Ownership
  userId              Int
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Interactions
  likes               Like[]    // Likes on this cycle
  comments            Comment[] // Comments on this cycle

  // Recycling Relations
  recycledFromId      Int?
  recycledFrom        Cycle?    @relation("cycle_recycled_from", fields: [recycledFromId], references: [id], onDelete: SetNull)
  recycledCycles      Cycle[]   @relation("cycle_recycled_from") // Cycles recycled from this cycle

  recycledByUserId    Int?
  recycledByUser      User?     @relation("user_recycled_cycles", fields: [recycledByUserId], references: [id], onDelete: SetNull)

  // Upcycling Relations
  upcycledFromId      Int?
  upcycledFrom        Cycle?    @relation("upcycle_chain", fields: [upcycledFromId], references: [id], onDelete: SetNull)
  upcycledCycles      Cycle[]   @relation("upcycle_chain") // Cycles upcycled from this cycle

  upcycledByUserId    Int?
  upcycledByUser      User?     @relation("user_upcycled_cycles", fields: [upcycledByUserId], references: [id], onDelete: SetNull)

  // Unique constraint to ensure a cycle can be upcycled only once
  @@unique([upcycledFromId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  cycleId   Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle     Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@unique([userId, cycleId]) // Ensures a user can like a cycle only once
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  cycleId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycle     Cycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)
}
